<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nl.pm.server.registry.dao.ProjectDao">
    <update id="updateProjectByProjectId" parameterType="com.nl.pm.server.registry.entity.ProjectEntity">
        set SQL_SAFE_UPDATES = 0;
        UPDATE `project` SET
        name = #{entity.name}
        WHERE
        system_project_id = #{entity.systemProjectId};
        set SQL_SAFE_UPDATES = 1;
    </update>
    <select id="queryTotalTime" resultType="double">
        SELECT SUM(drt.hours) FROM `day_report_task` drt
        LEFT JOIN `project` p ON p.id = drt.project_id
        WHERE p.name = #{projectName}
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
    </select>
    <select id="queryProjectAreaUsers" resultType="com.nl.pm.server.registry.param.DownProjectReportFormEntityParam">
        SELECT DISTINCT
        projectId,
        projectName,
        projectEnable,
        areaId,
        areaName,
        userId,
        nickname,
        roleCode,
        roleName,
        userStatus
        FROM
        (SELECT
        p.id AS projectId,
        p.name AS projectName,
        p.enable AS projectEnable,
        p.area_id AS areaId,
        a.name AS areaName,
        pu.user_id AS userId,
        u.nickname AS nickname,
        r.code AS roleCode,
        r.name AS roleName,
        u.status AS userStatus

        FROM `project` p
        LEFT JOIN `project_user` pu ON pu.project_id = p.id
        LEFT JOIN `area` a ON a.id = p.area_id
        LEFT JOIN `user` u ON u.id = pu.user_id
        LEFT JOIN `role` r ON u.role_id = r.id
        <where>
            <foreach collection="entityList" item="entity" separator="or">
               ( p.id = #{entity.projectId} AND p.area_id = #{entity.areaId} )
            </foreach>
        </where>
        UNION
        SELECT
        p.id AS projectId,
        p.name AS projectName,
        p.enable AS projectEnable,
        p.area_id AS areaId,
        a.name AS areaName,
        dr.user_id AS userId,
        u.nickname AS nickname,
        r.code AS roleCode,
        r.name AS roleName,
        u.status AS userStatus
        FROM `project` p
        LEFT JOIN `day_report_task` drt ON drt.project_id = p.id
        LEFT JOIN `day_report` dr ON dr.id = drt.project_id
        LEFT JOIN `area` a ON a.id = p.area_id
        LEFT JOIN `user` u ON u.id = dr.user_id
        LEFT JOIN `role` r ON u.role_id = r.id
        <where>
            <foreach collection="entityList" item="entity" separator="or">
                ( p.id = #{entity.projectId} AND p.area_id = #{entity.areaId} )
            </foreach>
        </where>
        ) AS tempTable
        WHERE tempTable.userId IS NOT NULL
        ORDER BY tempTable.projectName ASC, tempTable.areaName ASC,tempTable.userStatus DESC,field(`tempTable`.`roleCode`,'SUPER_ADMIN','FINANCE','MANAGEMENT','HR',
        'AREA_MANAGER','GROUP_MANAGER','EMPLOYEE') ASC ,tempTable.nickname ASC


    </select>
    <delete id="delRelevanceAreaAndProject">
        set SQL_SAFE_UPDATES = 0;

        DELETE FROM `area_user_ass`
        WHERE
        `user_id` = #{userId} ;

        DELETE FROM `project_user`
        WHERE
        `user_id` = #{userId};

        set SQL_SAFE_UPDATES = 1;

    </delete>
    <select id="queryCountManager" resultType="integer">
        SELECT 	COUNT(1)
        FROM
        `project`
        WHERE manager_id = #{userId}
        AND enable = 1

    </select>
    <insert id="createProject" parameterType="com.nl.pm.server.registry.entity.ProjectEntity" useGeneratedKeys="true" keyProperty="id">
        insert into `project` (
            `name`,
            `desc`,
            `area_id`,
            `manager_id`,
            `system_project_id`

        ) values(
            #{entity.name},
            #{entity.desc},
            #{entity.areaId},
            #{entity.managerId},
            case
            when (select sp.id from system_project as sp where sp.name = #{entity.name}) is null
            then -1
            else (select sp.id from system_project as sp where sp.name = #{entity.name})
            end
        )


    </insert>
    <select id="searchProject" parameterType="map" resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">

        select
            distinct
            project.`id` as `id`,
            project.`name` as `name`,
            project.`desc` as `desc`,
            project.`area_id` as `areaId`,
            project.`manager_id` as `managerId`,
            project.`enable` as `enable`,
            project.`create_time` as `createTime`,
            project.`update_time` as `updateTime`,
            area.`name` as `areaName`,
            user.`nickname` as `managerName`,
            sp.force_desc_flag as forceDescFlag,
            sp.area_id as systemProjectAreaId,
            project.system_project_id as systemProjectId
        from project
        left join area on project.`area_id` = area.`id`
        left join user on project.`manager_id` = user.`id`
        left join project_user as pu on project.`id` = pu.`project_id`
        left join system_project as sp on sp.`id` = project.`system_project_id`
        <where>
            <if test="param.areaId != null">
              and  project.`area_id` = #{param.areaId}
            </if>
            <if test="param.managerId != null">
                and  project.`manager_id` = #{param.managerId}
            </if>
            <if test="param.name != null">
                and  project.`name` like concat('%',#{param.name},'%')
            </if>
            <if test="param.userId != null">
                and  pu.`user_id` = #{param.userId}
            </if>
            <if test="param.enableFlag != null">
                and  project.`enable` = #{param.enableFlag}
            </if>
        </where>
        order by project.enable desc, (case when sp.`area_id` = #{param.currentAreaId} then 1 else 2 end) ,(case when project.`manager_id` = #{param.currentUserId} then 1 else 2 end),   project.`area_id` asc , project.`name` asc
    </select>

    <select id="fetchProject" parameterType="Integer" resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">
        select
            project.`id` as `id`,
            project.`name` as `name`,
            project.`desc` as `desc`,
            project.`area_id` as `areaId`,
            project.`manager_id` as `managerId`,
            project.`enable` as `enable`,
            project.`create_time` as `createTime`,
            project.`update_time` as `updateTime`,
            project.`system_project_id` as `systemProjectId`,
            area.`name` as `areaName`,
            user.`nickname` as `managerName`,
            sp.area_id as `mainAreaId`
            from project
            left join area on project.`area_id` = area.`id`
            left join user on project.`manager_id` = user.`id`
            left join system_project as sp on sp.`id` = project.`system_project_id`
        where project.`id` = #{id}
    </select>

    <select id="getAllProjectUserById" parameterType="Integer" resultType="com.nl.pm.server.registry.entity.ProjectUserEntity">
        select
            pu.id as id,
            pu.project_id as projectId,
            pu.user_id as userId,
            u.nickname as nickname,
            pu.create_time as createTime,
            pu.update_time as updateTime
        from `project_user` as pu
        inner join `user` as u on pu.`user_id` = u.`id`
        where
        pu.project_id = #{id}
        order by u.nickname
    </select>

    <select id="checkProjectNameExisted" parameterType="map" resultType="Integer">
        select
            count(p.`id`)
        from `project` as p
        <where>
            p.`name` = #{name}
            <if test="areaId!=null">
                and p.`area_id` = #{areaId}
            </if>
        </where>
    </select>

    <update id="updateProject" parameterType="com.nl.pm.server.registry.entity.ProjectEntity">
        update `project`
        set
            `name` = #{entity.name},
            `desc` = #{entity.desc},
            `manager_id` = #{entity.managerId},
            `system_project_id` = (
                                    case
                                    when (select sp.id from system_project as sp where sp.name = #{entity.name}) is null
                                    then -1
                                    else (select sp.id from system_project as sp where sp.name = #{entity.name})
                                    end
                                  )
        where
            `id` = #{entity.id}

    </update>

    <update id="openOrClose" parameterType="map">
        update `project`
        set
        `enable` = #{enable}
        where
        `id` = #{id}
    </update>

    <update id="assignEmployees" parameterType="map">
        delete from `project_user` where `project_id` = #{projectId};

        insert into `project_user`
            (project_id, user_id)
        values
            <foreach collection="userIdList" item="userId" separator="," index="">
                (#{projectId},#{userId})
            </foreach>
    </update>

    <select id="checkDayReportByProjectId" parameterType="Integer" resultType="Integer">
        select count(id)
        from `day_report_task`
        where `project_id` = #{projectId}
    </select>

    <delete id="deleteProject" parameterType="Integer">
        delete from `project_user` where `project_id` = #{projectId};

        delete from `project` where `id` = #{projectId};
    </delete>

    <update id="updateManagerByNameAndArea" parameterType="map">
        update `project`
        set `manager_id` = #{newManagerId}
        where `area_id` = #{areaId}
        and `name` in
        <foreach collection="nameList" item="name" separator="," open="(" close=")" index="">
            #{name}
        </foreach>
    </update>
    <update id="closeAllRelativeProjectBySystemProjectId">
        set SQL_SAFE_UPDATES = 0;
        update `project`
        set `enable` = 0
        where `system_project_id` = #{systemProjectId} ;
        set SQL_SAFE_UPDATES = 1;
    </update>
    <insert id="initUserAssProject" parameterType="map">
        set SQL_SAFE_UPDATES = 0;

        delete from `project_user` where
        `user_id` = #{userId}
        and `project_id` in
        (select p.`id` from `project` as p where p.`name` in ('公司会议','公司培训','公司展会支持','公司其他活动','学习提升','公司集团内项目','公司销售支持') and p.`area_id` = #{areaId});

        insert into `project_user` (`project_id`,`user_id`)
        select p.`id` ,#{userId} from `project` as p where p.`name`in ('公司会议','公司培训','公司展会支持','公司其他活动','学习提升','公司集团内项目','公司销售支持') and p.`area_id` = #{areaId};

        set SQL_SAFE_UPDATES = 1;

    </insert>

    <insert id="addUserToProject" parameterType="map">
        insert into `project_user`
            (project_id, user_id)
        values
            (#{projectId},#{userId})

    </insert>

    <insert id="addUserWithProject">
        insert into `project_user` (`project_id`,`user_id`)
        values(#{projectId},#{userId})

    </insert>

    <select id="searchProjectByNameAndArea" parameterType="map" resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        select
        project.`id` as `id`,
        project.`name` as `name`,
        project.`desc` as `desc`,
        project.`area_id` as `areaId`,
        project.`manager_id` as `managerId`,
        project.`enable` as `enable`,
        project.`create_time` as `createTime`,
        project.`update_time` as `updateTime`,
        area.`name` as `areaName`,
        user.`nickname` as `managerName`
        from project
        left join area on project.`area_id` = area.`id`
        left join user on project.`manager_id` = user.`id`
        <where> project.`area_id` = #{areaId}
            and project.`name` in
            <foreach collection="nameList" item="name" separator="," open="(" close=")" index="">
                #{name}
            </foreach>
        </where>
    </select>

    <select id="sumWorkTotal" resultType="double">
        SELECT SUM(drt.hours) FROM `day_report_task` drt
        LEFT JOIN `day_report` dr ON dr.id = drt.project_id
        WHERE drt.project_id = #{projectId}
        AND (dr.date BETWEEN STR_TO_DATE(#{startTime,jdbcType=VARCHAR},"%Y-%m-%d") AND STR_TO_DATE(#{endTime,jdbcType=VARCHAR},"%Y-%m-%d"))
    </select>

    <select id="queryProjectByIdOrAreaId" resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        SELECT p.* FROM `project` p
        WHERE p.create_time BETWEEN DATE_FORMAT(#{startTime},'%Y-%c-%d %H:%i:%s') AND DATE_FORMAT(#{endTime},'%Y-%c-%d %H:%i:%s')
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="projectId != null and projectId.length > 0">
            AND p.id IN
            <foreach collection="projectId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
    </select>

    <select id="queryProjectAndDistinct" resultType="string">
        SELECT DISTINCT(p.name) FROM `project` p
        LEFT JOIN `day_report_task` drt ON drt.project_id = p.id
        LEFT JOIN `day_report` dr ON dr.id = drt.day_report_id
        WHERE 1 = 1
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="projectId != null and projectId.length > 0">
            AND p.id IN
            <foreach collection="projectId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            AND dr.date BETWEEN STR_TO_DATE(#{startTime},"%Y-%m-%d") AND STR_TO_DATE(#{endTime},"%Y-%m-%d")
        </if>
    </select>

    <select id="queryProjectIsNullAndDistinct" resultType="string">
        SELECT DISTINCT(p.name) FROM `project` p
        LEFT JOIN `day_report_task` drt ON drt.project_id = p.id
        LEFT JOIN `day_report` dr ON dr.id = drt.day_report_id
        WHERE drt.id IS NULL
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="projectId != null and projectId.length > 0">
            AND p.id IN
            <foreach collection="projectId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            AND dr.date BETWEEN STR_TO_DATE(#{startTime},"%Y-%m-%d") AND STR_TO_DATE(#{endTime},"%Y-%m-%d")
        </if>
    </select>

    <select id="queryEveryUserTime" resultType="com.nl.pm.server.registry.param.ResReportFormEntityParam">
        SELECT u.id,u.nickname,p.name AS projectName,SUM(drt.hours) AS totalTime FROM `day_report` dr
        LEFT JOIN `day_report_task` drt ON drt.day_report_id = dr.id
        LEFT JOIN `project` p ON p.id = drt.project_id
        LEFT JOIN `user` u ON u.id = dr.user_id
        WHERE 1 = 1
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            AND dr.date BETWEEN STR_TO_DATE(#{startTime},"%Y-%m-%d") AND STR_TO_DATE(#{endTime},"%Y-%m-%d")
        </if>
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        <if test="projectId != null and projectId.length > 0">
            AND p.id IN
            <foreach collection="projectId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
        GROUP BY dr.user_id,p.name
    </select>
    <select id="getAllProjectUserByAreaId" resultType="com.nl.pm.server.registry.entity.ProjectUserEntity">
        select pu.`id`,
        pu.`project_id`,
        pu.`user_id`,
        pu.`create_time`,
        pu.`update_time`
        from `project_user` as pu
        inner join `project` as p on p.`id` = pu.`project_id`
        inner join `user` as u on u.`id` = pu.`user_id`
        where p.`area_id` = #{areaId}
        and u.status =1
    </select>
    <select id="getAllProjectUserByManagerId" resultType="com.nl.pm.server.registry.entity.ProjectUserEntity">
        select
        distinct
        pu.`user_id`,
        u.nickname
        from `project_user` as pu
        inner join `project` as p on p.`id` = pu.`project_id`
        left join `user` as u on u.`id` = pu.`user_id`
        where p.`manager_id` = #{managerId}
        and u.status = 1

    </select>
    <select id="searchProjectListByAssignUser" resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">
        select
            distinct
            p.`id`,
            p.`name`,
            p.`area_id`,
            a.`name` as areaName,
            p.`manager_id`,
            u.`nickname` as managerName,
            p.`enable`,
            p.`desc`,
            p.`create_time`,
            p.`update_time`,
            p.`system_project_id` as systemProjectId,
            sp.`force_desc_flag` as forceDescFlag,
            sp.`area_id` as systemProjectAreaId
        from `project_user` as pu
        left join `project` as p on pu.`project_id` = p.`id`
        left join `area` as a on p.`area_id` = a.`id`
        left join `user` as u on u.`id` = p.`manager_id`
        left join `system_project` as sp on sp.id = p.`system_project_id`
        where
        p.`enable` = 1
        and
        (
            pu.`user_id` = #{userId}
            or
            p.`manager_id` = #{userId}
        )
        order by (case when sp.`area_id` = #{areaId} then 1 else 2 end),(case when p.`manager_id` = #{userId} then 1 else 2 end) , p.`name` asc


    </select>

    <select id="searchAllProjectListByUserIdAndAreaId" resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">
        select
        distinct
        p.`id`,
        p.`name`,
        p.`area_id`,
        a.`name` as areaName,
        p.`manager_id`,
        u.`nickname` as managerName,
        p.`enable`,
        p.`desc`,
        p.`create_time`,
        p.`update_time`
        from `project` as p
        left join `project_user` as pu on pu.`project_id` = p.`id`
        left join `area` as a on p.`area_id` = a.`id`
        left join `user` as u on u.`id` = p.`manager_id`
        <where>
            <if test="superFlag == false">
                    pu.`user_id` = #{userId}
                or
                    p.`manager_id` = #{userId}
                <if test="areaId != null">
                    or
                    p.`area_id` = #{areaId}
                </if>
            </if>
        </where>

    </select>

    <select id="queryProjectByName" resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        SELECT
            p.`id`,
            p.`name`,
            p.`desc`,
            p.`area_id`,
            p.`manager_id`,
            p.`enable`,
            p.`create_time`,
            p. `update_time`
        FROM
            `project` p
        WHERE 1 = 1
        <if test="projectName != null and projectName.length > 0">
            AND p.name IN
            <foreach collection="projectName" item="name" separator="," open="(" close=")" index="">
                #{name}
            </foreach>
        </if>
        <if test="areaId != null and areaId.length > 0">
            AND p.area_id IN
            <foreach collection="areaId" item="id" separator="," open="(" close=")" index="">
                #{id}
            </foreach>
        </if>
    </select>

    <select id="queryProjectCountBySystemId" resultType="integer">
        SELECT COUNT(p.name) FROM `project` p
        WHERE p.name = (SELECT sp.name FROM `system_project` sp WHERE sp.id = #{systemProjectId})
    </select>
    <select id="getProjectIdsByName" resultType="java.lang.Integer">
        select id from `project` where name = #{name}
    </select>

    <select id="searchBoardProjectListTop6" resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">
        select
            allNumTable.id,
            allNumTable.name,
            allNumTable.hours
        from
        (
            select  tempTable.projectId as id,
                    <if test="roleCode == 'AREA_MANAGER' or roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT' or roleCode == 'FINANCE' ">
                        tempTable.projectName as name,
                    </if>
                    <if test="roleCode == 'GROUP_MANAGER' or  roleCode == 'EMPLOYEE' ">
                        concat(tempTable.projectName,'-',tempTable.areaName) as name,
                    </if>
                    tempTable.areaId as areaId,
                    tempTable.areaName as areaName,
                    tempTable.hours as hours
            from
            (
                select
                <if test="roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT'  or roleCode == 'FINANCE' ">
                    max(drt.`project_id`) as projectId ,
                    p.`name` as projectName,
                </if>
                <if test="roleCode != 'SUPER_ADMIN' and roleCode != 'MANAGEMENT'  and roleCode != 'FINANCE' ">
                    drt.`project_id` as projectId ,
                    max(p.`name`) as projectName,
                </if>
                    max(a.`id`) as areaId ,
                    max(a.`name`) as areaName,
                    sum(drt.`hours`) as hours
                from `day_report_task` as drt
                left join `project` as p on p.id = drt.project_id
                left join `day_report` as dr on dr.`id` = drt.`day_report_id`
                left join `area` as a on a.`id` = p.`area_id`
                <where>
                    p.enable = 1
                    and p.name not in ('公司会议','公司培训','公司其他活动','公司展会支持','公司集团内项目','学习提升','公司销售支持')
                    <if test="roleCode == 'AREA_MANAGER' ">
                        and p.`area_id` = #{areaId}
                    </if>
                    <if test="roleCode == 'GROUP_MANAGER' ">
                        and p.`manager_id` = #{userId}
                    </if>
                    <if test="roleCode == 'EMPLOYEE'">
                        and dr.`user_id` = #{userId}
                    </if>
                </where>
            <if test="roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT'  or roleCode == 'FINANCE' ">
                group by p.`name`
            </if>
            <if test="roleCode != 'SUPER_ADMIN' and roleCode != 'MANAGEMENT'  and roleCode != 'FINANCE' ">
                group by drt.`project_id`
            </if>
            ) as tempTable
            order by tempTable.hours desc,tempTable.projectName asc
        ) as allNumTable
        <if test="pjNumber != null and pjNumber != 0">
            limit #{pjNumber}
        </if>





    </select>


    <select id="searchBoardProjectListAll" resultType="Double">
        select
        sum(allNumTable.hours) as hours
        from
        (
        select  tempTable.projectId as id,
        <if test="roleCode == 'AREA_MANAGER' or roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT' or roleCode == 'FINANCE'  ">
            tempTable.projectName as name,
        </if>
        <if test="roleCode == 'GROUP_MANAGER' or  roleCode == 'EMPLOYEE' ">
            concat(tempTable.areaName,'-',tempTable.projectName) as name,
        </if>
        tempTable.areaId as areaId,
        tempTable.areaName as areaName,
        tempTable.hours as hours
        from
        (
        select
        <if test="roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT'  or roleCode == 'FINANCE' ">
            max(drt.`project_id`) as projectId ,
            p.`name` as projectName,
        </if>
        <if test="roleCode != 'SUPER_ADMIN' and roleCode != 'MANAGEMENT'  and roleCode != 'FINANCE' ">
            drt.`project_id` as projectId ,
            max(p.`name`) as projectName,
        </if>
        max(a.`id`) as areaId ,
        max(a.`name`) as areaName,
        sum(drt.`hours`) as hours
        from `day_report_task` as drt
        left join `project` as p on p.id = drt.project_id
        left join `day_report` as dr on dr.`id` = drt.`day_report_id`
        left join `area` as a on a.`id` = p.`area_id`
        <where>
            p.enable = 1
            and p.name not in ('公司会议','公司培训','公司其他活动','公司展会支持','公司集团内项目','学习提升','公司销售支持')
            <if test="roleCode == 'AREA_MANAGER' ">
                and p.`area_id` = #{areaId}
            </if>
            <if test="roleCode == 'GROUP_MANAGER' ">
                and p.`manager_id` = #{userId}
            </if>
            <if test="roleCode == 'EMPLOYEE'">
                and dr.`user_id` = #{userId}
            </if>
        </where>
        <if test="roleCode == 'SUPER_ADMIN' or roleCode == 'MANAGEMENT'  or roleCode == 'FINANCE' ">
            group by p.`name`
        </if>
        <if test="roleCode != 'SUPER_ADMIN' and roleCode != 'MANAGEMENT'  and roleCode != 'FINANCE' ">
            group by drt.`project_id`
        </if>
        ) as tempTable
        order by tempTable.hours desc,tempTable.projectName asc
        ) as allNumTable


    </select>


    <select id="searchBoardProjectUserTop6" resultType="com.nl.pm.server.registry.param.ProjectUserCountEntityParam">

        select p.`name` as projectName,count(pu.`id`) as countUser
        from  `project_user` as pu
        left join `project` as p on pu.`project_id` = p.`id`
        <where>
            p.enable = 1
            and
            p.name not in ('公司会议','公司培训','公司其他活动','公司展会支持','公司集团内项目','学习提升','公司销售支持')
            <if test="roleCode == 'AREA_MANAGER' ">
                and p.`area_id` = #{areaId}
            </if>
            <if test="roleCode == 'GROUP_MANAGER'">
                and p.`manager_id` = #{userId}
            </if>
        </where>
        group by p.name
        order by count(pu.`id`) desc
        limit 6

    </select>

    <select id="searchBoardProjectUserAll" resultType="java.lang.Integer">

        select sum(temp.countUser) from (
            select count(pu.`id`) as countUser
            from  `project_user` as pu
            left join `project` as p on pu.`project_id` = p.`id`
            <where>
                p.enable = 1
                and
                p.name not in ('公司会议','公司培训','公司其他活动','公司展会支持','公司集团内项目','学习提升','公司销售支持')
                <if test="roleCode == 'AREA_MANAGER' ">
                    and p.`area_id` = #{areaId}
                </if>
                <if test="roleCode == 'GROUP_MANAGER'">
                    and p.`manager_id` = #{userId}
                </if>
            </where>
            group by p.name
            order by count(pu.`id`) desc
        ) as temp

    </select>
    <select id="searchProjectBySystemProjectId" resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        select
        project.`id` as `id`,
        project.`name` as `name`,
        project.`desc` as `desc`,
        project.`area_id` as `areaId`,
        project.`manager_id` as `managerId`,
        project.`enable` as `enable`,
        project.`create_time` as `createTime`,
        project.`update_time` as `updateTime`,
        area.`name` as `areaName`,
        user.`nickname` as `managerName`
        from project
        left join area on project.`area_id` = area.`id`
        left join user on project.`manager_id` = user.`id`
        where project.`system_project_id` = #{systemProjectId}

    </select>
    <select id="searchAllForceDescProject" resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        select project.*
        from project
        inner join system_project as sp on project.system_project_id = sp.id
        where sp.force_desc_flag = 1

    </select>
    <select id="searchAssociatedProjectAreaList"
            resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">

        select
            sp.id as systemProjectId,
            sp.name as name,
            p.id as id,
            p.area_id as areaId,
            p.enable as enable,
            a.name as areaName,
            sum(case when drt.hours is null then 0 else drt.hours end ) as hours
        from system_project as sp
        inner join project as p on sp.id = p.system_project_id
        left join day_report_task as drt on drt.project_id = p.id
        left join area as a on p.area_id = a.id
        <where>
        <if test="mainAreaId != null">
        sp.area_id = #{mainAreaId}
        </if>
        <if test="managerId != null">
        and p.system_project_id in (select system_project_id from project where manager_id = #{managerId})
        </if>
        </where>
        group by sp.id,p.id
        order by sp.id



    </select>

    <select id="searchAssociatedProjectUserHoursList"
            resultType="com.nl.pm.server.registry.entity.ProjectAdvanceEntity">

        select
        sp.id as systemProjectId,
        sp.name as name,
        p.id as id,
        p.area_id as areaId,
        p.enable as enable,
        a.name as areaName,
        u.id as userId,
        u.nickname as nickname,
        sum(case when drt.hours is null then 0 else drt.hours end ) as hours
        from system_project as sp
        inner join project as p on sp.id = p.system_project_id
        left join day_report_task as drt on drt.project_id = p.id
        left join area as a on p.area_id = a.id
        left join day_report as dr on dr.id = drt.day_report_id
        left join user as u on u.id = dr.user_id

        <where>
            <if test="mainAreaId != null or managerId != null">
            (
            </if>
            <if test="mainAreaId != null">
                sp.area_id = #{mainAreaId}
            </if>
            <if test="managerId != null">
                and p.system_project_id in (select system_project_id from project where manager_id = #{managerId})
            </if>
            <if test="mainAreaId != null or managerId != null">
            )
                or
            </if>

            <if test="mainAreaId != null or managerId != null">
            (
            </if>
            <if test="mainAreaId != null">
                p.area_id = #{mainAreaId}
            </if>
            <if test="managerId != null">
                and p.manager_id = #{managerId}
            </if>
            <if test="mainAreaId != null or managerId != null">
            )
            </if>
        </where>

        group by sp.id,p.id,u.id
        order by sp.id



    </select>
    <select id="fetchProjectBySystemProjectIdAndAreaId"
            resultType="com.nl.pm.server.registry.entity.ProjectEntity">
        select p.*
        from `project` as p
        where p.system_project_id = #{systemProjectId}
        and p.area_id = #{areaId}

    </select>
</mapper>